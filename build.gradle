plugins {
    id "java-library"
    id "io.qameta.allure" version "2.11.2"
    id "com.github.ben-manes.versions" version "0.50.0"
}

group "com.github.rosolko"
version "1.0.0"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

allure {
    version = "2.25.0"
}

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.add('-parameters')
}

configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

dependencies {
    agent "org.aspectj:aspectjweaver:1.9.21"
    implementation("org.assertj:assertj-core:3.16.1")
    implementation "com.lmax:simple-dsl:2.2"
    implementation 'net.datafaker:datafaker:2.1.0'
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("io.qameta.allure:allure-okhttp3:2.25.0")
    implementation "org.hamcrest:hamcrest-core:2.2"
    implementation("com.codeborne:selenide:6.19.1")
    implementation("org.junit.jupiter:junit-jupiter:5.10.1")
    implementation("io.qameta.allure:allure-selenide:2.25.0")
    implementation("io.undertow:undertow-core:2.3.10.Final")
    implementation "io.rest-assured:rest-assured:4.2.1"
    implementation "io.rest-assured:rest-assured-common:4.2.1"
    implementation "io.rest-assured:json-path:4.2.1"
    implementation "io.rest-assured:xml-path:4.2.1"
    implementation "io.rest-assured:json-schema-validator:4.2.1"
    testRuntimeOnly("io.qameta.allure:allure-junit5:2.25.0")
    testRuntimeOnly("org.slf4j:slf4j-simple:2.0.11")
    implementation "io.qameta.allure:allure-java-commons:2.16.1"
    implementation "io.qameta.allure:allure-attachments:2.16.1"
    implementation "io.qameta.allure:allure-junit5:2.16.1"
    implementation "io.qameta.allure:allure-httpclient:2.16.1"
    implementation "io.qameta.allure:allure-generator:2.16.1"
    implementation "io.qameta.allure:allure-selenide:2.16.1"
    implementation "io.qameta.allure:allure-rest-assured:2.16.1"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks = (int) (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
    jvmArgs = [ "-javaagent:${configurations.agent.singleFile}" ]
    test.systemProperty("allure.results.directory", "${rootDir}/allure-results")
}

wrapper {
    gradleVersion = "8.4"
}

allure {
    autoconfigure = true
    version = "2.16.1"
//    resultsDir = file("${rootDir}/allure-results")
//    reportDir = file("${rootDir}/allure-report")
}

void configureJUnitProperties(Test test, String testsArg) {
    test.systemProperty("allure.results.directory", "${rootDir}/allure-results")
    test.systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    test.systemProperty 'junit.jupiter.execution.parallel.mode.classes.default', 'concurrent'
}